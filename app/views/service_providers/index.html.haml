- content_for :title do
  Services Map

- content_for :search_form do
  = form_tag "/services-map", :id => "search2", :method => "get" do
    = text_field_tag "search", params[:search]
    = link_to image_tag("plus/serch12.png", :class => "img12_1"), "#", :id => "search_services_link"

= image_tag "plus/body_com.jpg", :class => "body_header"
.alpha.grid24.body_about{:id => "firstElement",:style => "width:955px !important"}
  %span{:class => "p_a"}
    Services Map
  %span{:class => "p_a1", :style => "position: relative !important; left:-219px !important;"}
    = link_to "Home", "/"
    > Services Map

  #map
    %figure{:class => "p5"}
      #services_map{:style => "width:955px; height:450px"}

  .tabs2
    %div.tabber
      %div.tabbertab
        %h2
          A - J
        %p.i4_1.serv_loc6{:id => ""} 
          .bx-wrapper
            %div.bx-window
              %ul{:class => "i3_2", :id => "slider41", :style => "position: relative;"}
                %li{:class => "pager ps1"}
                  %ul
                    - unless @alphabetical_providers[0].nil?
                      - @alphabetical_providers[0].each do |provider|
                        - next if provider.blank?
                        = render "provider", :provider => provider
                  .clear
      %div.tabbertab
        %h2
          K - T
        %p.i4_1.serv_loc6{:id => ""} 
          .bx-wrapper
            %div.bx-window
              %ul{:class => "i3_2", :id => "slider41", :style => "position: relative;"}
                %li{:class => "pager ps1"}
                  %ul
                    - unless @alphabetical_providers[1].nil?
                      - @alphabetical_providers[1].each do |provider|
                        - next if provider.blank?
                        = render "provider", :provider => provider
                  .clear
      %div.tabbertab
        %h2
          U - Z
        %p.i4_1.serv_loc6{:id => ""} 
          .bx-wrapper
            %div.bx-window
              %ul{:class => "i3_2", :id => "slider41", :style => "position: relative;"}
                %li{:class => "pager ps1"}
                  %ul
                    - unless @alphabetical_providers[2].nil?
                      - @alphabetical_providers[2].each do |provider|
                        - next if provider.blank?
                        = render "provider", :provider => provider
                  .clear
            
%script{:src => "http://maps.googleapis.com/maps/api/js?key=AIzaSyBmJE9KrYdmPiW16lAHDJOiCvS1Fwen7BU&sensor=true"}

:javascript
  var map;
  var gl;
  
  try {
    if (typeof navigator.geolocation === 'undefined'){
      gl = google.gears.factory.create('beta.geolocation');
    } else {
      gl = navigator.geolocation;
    }
  } catch(e) {}
  
  function initMap() {
    if (gl) {
      gl.getCurrentPosition(function displayMap(position){
        map = showMap(position, 15, "services_map");

        setMarker();

      }, displayError);
    } else {
      displayError();
    }
  }
  
  google.maps.event.addDomListener(window, 'load', initMap);

  // Show a map centered at (position.coords.latitude, position.coords.longitude).
  function showMap(position, zoomValue, mapElement){
    var map;
    var mapOptions = {
      center: new google.maps.LatLng(position.coords.latitude, position.coords.longitude),
      zoom: zoomValue,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };

    map = new google.maps.Map(document.getElementById(mapElement), mapOptions);
    
    return map;
  }

  // Marked on locations along with the info window
  function showMarker(map, latLng, titleName, infoContent){
    var marker = new google.maps.Marker({
      position: latLng,
      map: map,
      title: titleName
    });
    
    var infoWindow = new google.maps.InfoWindow();
    
    google.maps.event.addListener(marker, 'click', (function setInfoWindow(marker){
      return function(){
        infoWindow.setPosition(latLng);
        infoWindow.setContent(infoContent);
        infoWindow.open(map, marker); 
      }    
    })(marker));
    
    return marker;
  }

  // Show location error
  function displayError(positionError) {
    alert("Could not determine location.");
  }

  // Return facility description for infoWindow
  function getFacilityInformation(serviceDesc, completeAddress, locationName, phone, email){
    var completeDescription = '<b>'+locationName+'</b><br>'+ serviceDesc;
    
    completeDescription += '<br><small>'+ completeAddress +'</small><br><small>Phone: '+ phone +'</small><br><small>Email: '+ email +'</small>';
    
    return completeDescription;
  }

%script
  function setMarker() {
  var geocoder = new google.maps.Geocoder();

  - @service_providers.each do |provider|
    - next if provider.address.nil? || provider.address.blank?
    geocoder.geocode( { 'address': '#{escape_javascript provider.address}'}, function(results, status) {
    centered = results[0].geometry.location;
    showMarker(map, centered, '#{provider.name}', getFacilityInformation('#{escape_javascript provider.description}','#{escape_javascript provider.address}', '#{escape_javascript provider.name}', '#{escape_javascript provider.telephone}', '#{escape_javascript provider.email}'));
    });
  }




    
